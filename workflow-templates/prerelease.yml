name: "Post-Integration: Prerelease"

on:
  pull_request:
    branches: [ $default-branch ]
    types: [ closed ]

jobs:

  prerelease:
    runs-on: ubuntu-20.04
    if: github.event.pull_request.merged == true
    outputs:
      key: ${{ steps.prerelease-tag.outputs.key }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: prerelease-tag
        uses: sepulsa/prerelease-action@main
        with:
          branch: ${{ github.head_ref }}

  deploy:
    needs: prerelease
    runs-on: ubuntu-20.04
    if: needs.prerelease.outputs.key
    environment:
      name: staging:${{ needs.prerelease.outputs.key }}
      url: https://${{ secrets.SYSTEM_NAME }}-${{ needs.prerelease.outputs.key }}.${{ secrets.DOMAIN }}     
    env:
      # Your system name for example proteus-core
      SYSTEM_NAME: ""
      # Environment URL
      URL: "$SYSTEM_NAME-${{ needs.prerelease.outputs.key }}.${{ secrets.DOMAIN }}"
      # Kubernetes endpoint/ingress IP address
      INGRESS_ENDPOINT: ""
      #AWS EKS cluster region
      AWS_CLUSTER_REGION: ""
      #AWS EKS cluster name
      AWS_CLUSTER_NAME: ""
      #Kubernetes namespace
      K8S_NAMESPACE: ""
      # Kubernetes whitelist ip address
      K8S_WHITELIST_IP: ""
      # Kubernetes service name
      K8S_SERVICE_NAME: ""
      #Kubernetes service port
      K8S_SERVICE_PORT: ""
    steps:
      - name: Check if variable is empty
        run: |
          if [ -z "${SYSTEM_NAME}" ]; then
            echo "::error::'SYSTEM_NAME' environment variable must be set"
            exit 1
          fi
          if [ -z "${INGRESS_ENDPOINT}" ]; then
            echo "::error::'INGRESS_ENDPOINT' environment variable must be set"
            exit 1
          fi
          if [ -z "${AWS_CLUSTER_REGION}" ]; then
            echo "::error::'AWS_CLUSTER_REGION' environment variable must be set"
            exit 1
          fi
          if [ -z "${AWS_CLUSTER_NAME}" ]; then
            echo "::error::'AWS_CLUSTER_NAME' environment variable must be set"
            exit 1
          fi
          if [ -z "${K8S_NAMESPACE}" ]; then
            echo "::error::'K8S_NAMESPACE' environment variable must be set"
            exit 1
          fi
          if [ -z "${K8S_WHITELIST_IP}" ]; then
            echo "::error::'K8S_WHITELIST_IP' environment variable must be set"
            exit 1
          fi
          if [ -z "${K8S_SERVICE_NAME}" ]; then
            echo "::error::'K8S_SERVICE_NAME' environment variable must be set"
            exit 1
          fi
          if [ -z "${K8S_SERVICE_PORT}" ]; then
            echo "::error::'K8S_SERVICE_PORT' environment variable must be set"
            exit 1
          fi
      - run: echo 'Deployed'
      # Configure AWS Credentials for EKS
      - run: |
          aws configure set aws_access_key_id $EKS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $EKS_SECRET_ACCESS_KEY
        env:
          EKS_ACCESS_KEY_ID: ${{ secrets.EKS_ALTERRA_ID_ACCESS_KEY_ID }}
          EKS_SECRET_ACCESS_KEY: ${{ secrets.EKS_ALTERRA_ID_SECRET_ACCESS_KEY }}
      - name: Create kubeconfig
        run: |
          brew install aws-iam-authenticator
          aws eks --region $AWS_CLUSTER_REGION update-kubeconfig --name $AWS_CLUSTER_NAME
      - uses: sepulsa/post-integration-action/create-ingress@ingress-standalone
        with:
          name: $SYSTEM_NAME-${{ needs.prerelease.outputs.key }}
          namespace: $K8S_NAMESPACE
          whitelist-ip: $K8S_WHITELIST_IP
          host: $SYSTEM_NAME-${{ needs.prerelease.outputs.key }}.${{ secrets.DOMAIN }}
          service-name: $K8S_SERVICE_NAME
          service-port: $K8S_SERVICE_PORT      

      - name: Configure AWS credentials for Route53
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - id: create-domain
        uses: sepulsa/post-integration-action/route-domain@main
        with:
          action: CREATE
          name: $SYSTEM_NAME-${{ needs.prerelease.outputs.key }}.${{ secrets.DOMAIN }}
          type: CNAME
          dns-record: $INGRESS_ENDPOINT
          zone-id: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
       

  regression:
    needs: [prerelease, deploy]
    runs-on: ubuntu-20.04
    env:
      # Repository of regression test in format <organization>/<repository>.
      REPOSITORY: ""
      # Maven project under monorepo of regression test.
      PROJECT: ""
      # Domain of URL for accesing the env 
      DOMAIN: ""
      # Your system name for example proteus-core
      SYSTEM_NAME: ""
      TICKET: "${{ needs.prerelease.outputs.key }}"
    steps:
      - name: Check if variable is empty
        run: |
          if [ -z "${REPOSITORY}" ]; then
            echo "::error::'REPOSITORY' environment variable must be set"
            exit 1
          fi
          if [ -z "${PROJECT}" ]; then
            echo "::error::'PROJECT' environment variable must be set"
            exit 1
          fi
          if [ -z "${SYSTEM_NAME}" ]; then
            echo "::error::'NAME' environment variable must be set"
            exit 1
          fi
          if [ -z "${DOMAIN}" ]; then
            echo "::error::'DOMAIN' environment variable must be set"
            exit 1
          fi

      - name: Set Environment URL
        run: |
          echo "STG_ENV=https://${SYSTEM_NAME}-${{ needs.prerelease.outputs.key }}.${DOMAIN}" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          repository: ${{ env.REPOSITORY }}
          ref: master
          token: ${{ secrets.REGRESSION_PAT }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml', '${{ env.PROJECT }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Run Regression
        run: |
          NOW=$(date +%d%m%Y)
          mvn -pl ${PROJECT} verify -q \
          -Dwebdriver.base.url=${STG_ENV} \
          -Drp.endpoint=${{ secrets.RP_ENDPOINT }} \
          -Drp.api.key=${{ secrets.RP_API_KEY }} \
          -Drp.description="Regression ${NOW} - Github Action #${GITHUB_RUN_NUMBER}" \
          -Drp.attributes=release:${NOW}

      # Optional. It will take some artifact storage quota.
      # Disable if dont needed.
      - name: Uploading Result Data
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Result
          path: ${{ env.PROJECT }}/target/site
          retention-days: 2

      # Need Zephyr Scale Key preconfigured.
      - name: Sending Result to Zephyr Scale
        if: ${{ success() || failure() }}
        env:
          ZEPHYR_API_KEY: ${{ secrets.TM4J_KEY }}
          PROJECT_KEY: ABCD
          JSON_PATH: ${{ env.PROJECT }}/target/cucumber-parallel/*.json
        run: |
          zip result.zip $JSON_PATH
          curl --request POST \
            --url "https://api.adaptavist.io/tm4j/v2/automations/executions/cucumber?projectKey=$PROJECT_KEY&autoCreateTestCases=false" \
            --header "Authorization: Bearer $ZEPHYR_API_KEY" \
            --header 'content-type: multipart/form-data' \
            --form "file=@result.zip;type=application/x-zip-compressed"
