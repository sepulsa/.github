name: "Post-Integration: Prerelease"

on:
  pull_request:
    branches: [ $default-branch ]
    types: [ closed ]

env:
  SUBDOMAIN_PREFIX: ""
  # Domain of URL for accesing the env
  DOMAIN: ""

jobs:

  prerelease:
    runs-on: ubuntu-20.04
    if: github.event.pull_request.merged == true
    outputs:
      key: ${{ steps.prerelease-tag.outputs.key }}
      tag: ${{ steps.prerelease-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: prerelease-tag
        uses: sepulsa/post-integration-action/prerelease@main
        with:
          branch: ${{ github.head_ref }}

  deploy:
    needs: prerelease
    runs-on: ubuntu-20.04
    if: needs.prerelease.outputs.key
    environment:
      name: staging:${{ needs.prerelease.outputs.key }}
      url: https://${{ env.SUBDOMAIN_PREFIX }}-${{ needs.prerelease.outputs.key }}.${{ env.DOMAIN }}
    env:
      KEY: ${{ needs.prerelease.outputs.key }}
    steps:
      - name: Check if variable is empty
        run: |
          if [ -z "${SUBDOMAIN_PREFIX}" ]; then
            echo "::error::'SUBDOMAIN_PREFIX' environment variable must be set"
            exit 1
          fi
          if [ -z "${DOMAIN}" ]; then
            echo "::error::'DOMAIN' environment variable must be set"
            exit 1
          fi
      - uses: actions/checkout@v2
      # Cache terraform
      - uses: actions/cache@v2
        with:
          path: .terraform/providers
          key: ${{ runner.os }}-terraform-${{ hashFiles('.terraform.lock.hcl') }}
          restore-keys: ${{ runner.os }}-terraform-
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: Create kubeconfig
        run: aws eks update-kubeconfig --name ${K8S_CLUSTER}
        env:
          K8S_CLUSTER: ""
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform Format
        run: terraform fmt -check
      - name: Terraform Init
        run: terraform init -backend-config bucket=${TF_S3_BUCKET} -backend-config key=${TF_S3_KEY}
        env:
          TF_S3_BUCKET: ""
          TF_S3_KEY: ""
      - run: terraform workspace new ${KEY} || terraform workspace select ${KEY}
      - name: Terraform Apply
        run: terraform apply -auto-approve -var namespace=${NAMESPACE_PREFIX}-${KEY,,} -var host=${SUBDOMAIN_PREFIX}-${KEY,,}.${DOMAIN}
        env:
          KUBE_CONFIG_PATH: ~/.kube/config
          NAMESPACE_PREFIX: ""
          # Terraform input
          TF_VAR_route53_access_key: ${{ secrets.ROUTE53_ACCESS_KEY_ID }}
          TF_VAR_route53_secret_key: ${{ secrets.ROUTE53_SECRET_ACCESS_KEY }}
          TF_VAR_route53_region: ap-southeast-1
          TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
          # @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html
          # for possible dns record type
          TF_VAR_route53_type: ""
          # Define additional terraform input here
          # @see https://www.terraform.io/docs/language/values/variables.html#environment-variables

  regression:
    needs: [prerelease, deploy]
    runs-on: ubuntu-20.04
    env:
      # Repository of regression test in format <organization>/<repository>.
      REPOSITORY: ""
      # Maven project under monorepo of regression test.
      PROJECT: ""
      TICKET: "${{ needs.prerelease.outputs.key }}"
    steps:
      - name: Check if variable is empty
        run: |
          if [ -z "${REPOSITORY}" ]; then
            echo "::error::'REPOSITORY' environment variable must be set"
            exit 1
          fi
          if [ -z "${PROJECT}" ]; then
            echo "::error::'PROJECT' environment variable must be set"
            exit 1
          fi
      - name: Set Environment URL
        run: |
          echo "STG_ENV=https://${SUBDOMAIN_PREFIX}-${TICKET}.${DOMAIN}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
        with:
          repository: ${{ env.REPOSITORY }}
          ref: master
          token: ${{ secrets.REGRESSION_PAT }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml', '${{ env.PROJECT }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Run Regression
        run: |
          NOW=$(date +%d%m%Y)
          mvn -pl ${PROJECT} verify -q \
          -Dwebdriver.base.url=${STG_ENV} \
          -Drp.endpoint=${{ secrets.RP_ENDPOINT }} \
          -Drp.api.key=${{ secrets.RP_API_KEY }} \
          -Drp.description="Regression ${NOW} - Github Action #${GITHUB_RUN_NUMBER}" \
          -Drp.attributes=release:${NOW}

      # Optional. It will take some artifact storage quota.
      # Disable if dont needed.
      - name: Uploading Result Data
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Result
          path: ${{ env.PROJECT }}/target/site
          retention-days: 2

      # Need Zephyr Scale Key preconfigured.
      - name: Sending Result to Zephyr Scale
        if: ${{ success() || failure() }}
        env:
          ZEPHYR_API_KEY: ${{ secrets.TM4J_KEY }}
          PROJECT_KEY: ABCD
          JSON_PATH: ${{ env.PROJECT }}/target/cucumber-parallel/*.json
        run: |
          zip result.zip $JSON_PATH
          curl --request POST \
            --url "https://api.adaptavist.io/tm4j/v2/automations/executions/cucumber?projectKey=$PROJECT_KEY&autoCreateTestCases=false" \
            --header "Authorization: Bearer $ZEPHYR_API_KEY" \
            --header 'content-type: multipart/form-data' \
            --form "file=@result.zip;type=application/x-zip-compressed"
